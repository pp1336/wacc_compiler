### Architecture

## Parsing

## Syntax checking

## Code Generation
Code is generated by calling the `.codegen()` method of the 
`src.ast.program.Program` node of the ast. We then recursively call the
`.codegen()` methods of the node's children and add them in order to a
 `src.codeGeneration.MachineState`.

# Machine state
Each `.codegen()` method must be passed a `src.codeGeneration.MachineState`.
This object is in charge of
1. Managing the generated code
2. Managing available registers
3. Generating unique labels

# Registers
Registers are managed by <some process>.
I *think* that when an expression is evaluated, you can use 
`MachineState.getLastUsedRegister()` to get the register with the result of
the evaluation in it.

# Instructions
To build a new instruction...

1. Find the class for the instruction you want to build, e.g. `Add`
2. Instantiate it, passing it appropriate arguments:
	`new Add(new KnownRegister(Register.r0), new Immediate(1))`
3. Call additional build methods:
 	e.g. I want my add instruction to execute conditionally, and set the flags
 	register when it does so
 	`new Add(new KnownRegister(Register.r0), new Immediate(1))
 	 .setCond(ConditionCode.LOWER).shouldSetFlags()`
