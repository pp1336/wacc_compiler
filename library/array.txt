arrayLib

 int minimum(int[] a) is
    int l = (len a) - 1;
    int min = a[l];
    while l > 0 do
      l = l - 1;
      int b = a[l];
      if b < min then
        min = b
      else
        skip
      fi
    done;
    return min
 end

 int maximum(int[] a) is
    int l = (len a) - 1;
    int max = a[l];
    while l > 0 do
      l = l - 1;
      int b = a[l];
      if b > max then
        max = b
      else
        skip
      fi
    done;
    return max
 end

 int lookup(int x, int[] a) is
    int l = (len a) - 1;
    if l < 0 then
      return -1
    else   
      int r = -1;
      while r < l do
        r = r + 1;
        if a[r] == x then
          return r
        else
          skip
        fi
      done;
      return -1
    fi
 end

 int[] swap(int[] a, int b, int c) is
    int temp = a[b];
    a[b] = a[c];
    a[c] = temp;
    return a
 end

 int[] heapAdd(int[] a, int r) is
    int p = (r - 1) / 2;
    while a[p] < a[r] do
      int temp = a[p];
      a[p] = a[r];
      a[r] = temp;
      r = p;
      p = (r - 1) / 2
    done;
    return a
 end

 int[] heapRebuild(int[] a, int n) is
    int current = 0;
    int left = 1;
    int right = 2;
    while left <= n do
      if right <= n && a[right] > a[left] then
        left = right
      else
        skip
      fi;
      if a[current] < a[left] then
        int temp = a[current];
        a[current] = a[left];
        a[left] = temp;
        current = left
      else
        return a
      fi;
      left = 2 * current + 1;
      right = 2 * current + 2
    done;
    return a
 end

 int[] heapSort(int[] a) is
    int l = len a;
    if l <= 1 then
      return a
    else
      int r = 1;
      while r < l do
        a = call heapAdd(a, r);
        r = r + 1
      done;
      l = l - 1;
      while l > 0 do
        a = call swap(a, l, 0);
        l = l - 1;
        a = call heapRebuild(a, l)
      done
    fi;
    return a
 end

 int printArrInt(int[] a) is
    int l = len a;
    if l <= 0 then
      return 0
    else
      int i = 0;
      while i < l do
        print a[i];
        print ' ';
        i = i + 1
      done
    fi;
    println ' ';
    return 0
 end

 int[] reverse(int[] a) is
    int last = (len a) - 1;
    int l = (len a) / 2 - 1;
    while l >= 0 do
      int temp = a[l];
      a[l] = a[last - l];
      a[last - l] = temp;
      l = l - 1
    done;
    return a
 end
